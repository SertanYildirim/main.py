# modules/transformer.py

import streamlit as st
from sklearn.preprocessing import LabelEncoder, StandardScaler, MinMaxScaler
import pandas as pd
from sklearn.preprocessing import OneHotEncoder

def run():
    st.subheader("ğŸ”§ Veri DÃ¶nÃ¼ÅŸtÃ¼rme")

    if "data" not in st.session_state:
        st.warning("LÃ¼tfen Ã¶nce veri yÃ¼kleyin.")
        return

    df = st.session_state["data"]
    df_temp = df.copy()  # GeÃ§ici kopya, iÅŸlemler burada yapÄ±lacak

    st.write("### ğŸ“Š Veri DÃ¶nÃ¼ÅŸtÃ¼rme Verisi")
    st.dataframe(df_temp)

    st.write("### DÃ¶nÃ¼ÅŸtÃ¼rme Ä°ÅŸlemini SeÃ§in")
    islem = st.selectbox("Ä°ÅŸlem", [
        "Label Encoding",
        "One-Hot Encoding",
        "Standard Scaling",
        "Min-Max Scaling",
        "Veri Tipi DÃ¶nÃ¼ÅŸtÃ¼rme",
        "Tarih SÃ¼tunlarÄ±nÄ± AyÄ±r"
    ])

    match islem:
        case "Label Encoding":
            kat_sutun = st.selectbox("Kategorik SÃ¼tun SeÃ§in", df_temp.select_dtypes(include='object').columns)
            if st.button("Label Encode Et"):
                encoder = LabelEncoder()
                df_temp[kat_sutun] = encoder.fit_transform(df_temp[kat_sutun].astype(str))
                st.success("Label encoding geÃ§ici olarak uygulandÄ±.")
                st.dataframe(df_temp)

        case "One-Hot Encoding":
            kat_sutun = st.multiselect(
                "One-Hot Encoding yapÄ±lacak sÃ¼tun(lar)",
                df_temp.select_dtypes(include='object').columns
            )

            if kat_sutun and st.button("One-Hot Encode Et"):
                try:
                    encoder = OneHotEncoder(sparse_output=False, drop='first')
                    encoded_array = encoder.fit_transform(df_temp[kat_sutun])
                    encoded_df = pd.DataFrame(
                        encoded_array,
                        columns=encoder.get_feature_names_out(kat_sutun),
                        index=df_temp.index
                    )
                    # Orijinal sÃ¼tunlarÄ± kaldÄ±rÄ±p encode edilmiÅŸ sÃ¼tunlarÄ± ekle
                    df_temp = pd.concat([df_temp.drop(columns=kat_sutun), encoded_df], axis=1)

                    st.success("One-hot encoding geÃ§ici olarak uygulandÄ±.")
                    st.dataframe(df_temp)
                except Exception as e:
                    st.error(f"One-Hot Encoding uygulanÄ±rken hata: {e}")

        case "Standard Scaling":
            sayisal_sutun = st.multiselect("Standard Scaling yapÄ±lacak sÃ¼tun(lar)", df_temp.select_dtypes(include='number').columns)
            if st.button("Standard Scaler Uygula"):
                scaler = StandardScaler()
                df_temp[sayisal_sutun] = scaler.fit_transform(df_temp[sayisal_sutun])
                st.success("Standard scaling geÃ§ici olarak uygulandÄ±.")
                st.dataframe(df_temp)

        case "Min-Max Scaling":
            sayisal_sutun = st.multiselect("Min-Max Scaling yapÄ±lacak sÃ¼tun(lar)", df_temp.select_dtypes(include='number').columns)
            if st.button("Min-Max Scaler Uygula"):
                scaler = MinMaxScaler()
                df_temp[sayisal_sutun] = scaler.fit_transform(df_temp[sayisal_sutun])
                st.success("Min-Max scaling geÃ§ici olarak uygulandÄ±.")
                st.dataframe(df_temp)

        case "Veri Tipi DÃ¶nÃ¼ÅŸtÃ¼rme":
            secilen_sutun = st.selectbox("DÃ¶nÃ¼ÅŸtÃ¼rÃ¼lecek sÃ¼tun", df_temp.columns)
            yeni_tip = st.selectbox("Yeni veri tipi", ["int", "float", "str"])
            if st.button("Tip DÃ¶nÃ¼ÅŸtÃ¼r"):
                try:
                    df_temp[secilen_sutun] = df_temp[secilen_sutun].astype(yeni_tip)
                    st.success(f"{secilen_sutun} sÃ¼tunu {yeni_tip} tipine geÃ§ici olarak dÃ¶nÃ¼ÅŸtÃ¼rÃ¼ldÃ¼.")
                    st.dataframe(df_temp)
                except Exception as e:
                    st.error(f"Hata: {e}")

        case "Tarih SÃ¼tunlarÄ±nÄ± AyÄ±r":
            # DatetimeIndex kontrolÃ¼
            if not isinstance(df_temp.index, pd.DatetimeIndex):
                st.error(
                    "â›” Veri zaman serisi deÄŸil veya datetime index yok. LÃ¼tfen datetime index iÃ§eren bir veri yÃ¼kleyin.")
            else:
                if st.button("Tarih AlanlarÄ±nÄ± AyÄ±r"):
                    try:
                        df_temp["year"] = df_temp.index.year
                        df_temp["month"] = df_temp.index.month
                        df_temp["day"] = df_temp.index.day
                        df_temp["HaftaGÃ¼nÃ¼Numara"] = df_temp.index.weekday + 1
                        # GÃ¼n adÄ± eklemek iÃ§in
                        gunler = {1: "Pazartesi",2:"SalÄ±",3:"Ã‡arÅŸamba",4:"PerÅŸembe",5:"Cuma",6:"Cumartesi",7:"Pazar"}
                        df_temp["HaftaGÃ¼nÃ¼AdÄ±"] = df_temp["HaftaGÃ¼nÃ¼Numara"].map(gunler)
                        st.success("Tarih bileÅŸenleri geÃ§ici olarak ayrÄ±ldÄ±.")
                        st.dataframe(df_temp)
                    except Exception as e:
                        st.error(f"Hata: {e}")

    # ------------------- Session State Kaydet -------------------
    if st.button("âœ… Session State'e Kaydet"):
        st.session_state["data"] = df_temp
        st.success("GÃ¼ncellenmiÅŸ veri session_state'e kaydedildi.")
