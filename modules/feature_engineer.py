# modules/feature_engineer.py
import pandas as pd
import numpy as np
from sklearn.preprocessing import OneHotEncoder, MinMaxScaler
import streamlit as st

def run():
    """
    √ñzellik m√ºhendisliƒüi adƒ±mlarƒ±nƒ± uygular.
    Loader tarih kolonu bulduysa index (DatetimeIndex) √ºzerinden otomatik √ßalƒ±≈üƒ±r.
    Diƒüer adƒ±mlar yalnƒ±zca kullanƒ±cƒ± se√ßim yaparsa uygulanƒ±r.
    """

    st.subheader("üìä √ñzellik M√ºhendisliƒüi (Feature Engineering)")

    if "data" not in st.session_state:
        st.warning("L√ºtfen √∂nce veri y√ºkleyin.")
        return

    df = st.session_state["data"].copy()

    # --- 1) Kategorik (One-Hot) ---
    st.write("### üóÇ Kategorik S√ºtunlar (One-Hot Encoding)")
    categorical_columns = st.multiselect(
        "One-Hot Encoding yapƒ±lacak kategorik s√ºtunlarƒ± se√ßin",
        df.select_dtypes(include="object").columns.tolist()
    )

    # --- 2) Sayƒ±sal (Scaling) ---
    st.write("### üî¢ Sayƒ±sal S√ºtunlar (Min-Max Scaling)")
    scale_columns = st.multiselect(
        "√ñl√ßeklenecek sayƒ±sal s√ºtunlarƒ± se√ßin",
        df.select_dtypes(include=np.number).columns.tolist()
    )

    # --- 3) Tarih (Otomatik yerine butonla) ---
    st.write("### üìÖ Tarih √ñzellikleri")
    has_dt_index = isinstance(df.index, pd.DatetimeIndex)

    if has_dt_index:
        st.caption("‚úÖ DatetimeIndex algƒ±landƒ±; isterseniz yƒ±l/ay/g√ºn/hafta_g√ºn√º √∂zelliklerine ayƒ±rabilirsiniz.")
        if st.button("üìå Tarih kolonlarƒ±nƒ± ayƒ±r"):
            try:
                ts = df.index
                df["Yƒ±l"] = ts.year
                df["Ay"] = ts.month
                df["G√ºn"] = ts.day
                df["HaftaG√ºn√º"] = df.index.weekday + 1   # Pazartesi=1, Pazar=7

                gunler = {
                    1: "Pazartesi",
                    2: "Salƒ±",
                    3: "√áar≈üamba",
                    4: "Per≈üembe",
                    5: "Cuma",
                    6: "Cumartesi",
                    7: "Pazar"
                }
                df["HaftaG√ºn√ºAdƒ±"] = df["HaftaG√ºn√º"].map(gunler)
                st.success("Index (DatetimeIndex) √ºzerinden yƒ±l, ay, g√ºn, hafta_g√ºn√º √∂zellikleri olu≈üturuldu.")
                if st.button("Session State'e Kaydet"):
                    st.session_state["data"] = df
                    st.success("G√ºncellenmi≈ü veri session_state'e kaydedildi.")
            except Exception as e:
                st.error(f"DatetimeIndex i≈ülenirken hata: {e}")
    else:
        st.info("‚ÑπÔ∏è Bu veride tarih kolonu yok (DatetimeIndex bulunamadƒ±).")

    st.write("### üìä √ñzellik M√ºhendisliƒüi Sonu√ß Verisi")
    st.dataframe(df)

    # --- 4) Yeni √ñzellik ƒ∞fadeleri ---
    st.write("### ‚ú® Yeni √ñzellikler (Opsiyonel)")
    new_features_input = st.text_area("Yeni feature ifadelerini yazƒ±n (√∂rn: df['new_col'] = df['col1'] + df['col2'])")

    if st.button("√ñzellik M√ºhendisliƒüini Uygula"):
        # 1. Kategorik
        if categorical_columns:
            for column in categorical_columns:
                try:
                    encoder = OneHotEncoder(drop='first', sparse_output=False)  # scikit-learn >=1.2
                    one_hot_encoded = encoder.fit_transform(df[[column]])
                    one_hot_df = pd.DataFrame(
                        one_hot_encoded,
                        columns=encoder.get_feature_names_out([column]),
                        index=df.index
                    )
                    df = pd.concat([df, one_hot_df], axis=1)
                    df.drop(columns=[column], inplace=True)
                    st.success(f"'{column}' s√ºtunu one-hot encoding ile d√∂n√º≈üt√ºr√ºld√º.")
                except TypeError:
                    # Eski scikit-learn s√ºr√ºmleri i√ßin geri d√∂n√º≈ü
                    try:
                        encoder = OneHotEncoder(drop='first', sparse_output=False)
                        one_hot_encoded = encoder.fit_transform(df[[column]])
                        one_hot_df = pd.DataFrame(
                            one_hot_encoded,
                            columns=encoder.get_feature_names_out([column]),
                            index=df.index
                        )
                        df = pd.concat([df, one_hot_df], axis=1)
                        df.drop(columns=[column], inplace=True)
                        st.success(f"'{column}' s√ºtunu one-hot encoding ile d√∂n√º≈üt√ºr√ºld√º. (compat mod)")
                    except Exception as e:
                        st.error(f"'{column}' s√ºtunu d√∂n√º≈üt√ºr√ºl√ºrken hata: {e}")
                except Exception as e:
                    st.error(f"'{column}' s√ºtunu d√∂n√º≈üt√ºr√ºl√ºrken hata: {e}")
        else:
            st.info("D√∂n√º≈üt√ºr√ºlecek kategorik s√ºtun se√ßilmedi.")

        # 2. Sayƒ±sal
        if scale_columns:
            try:
                scaler = MinMaxScaler()
                df[scale_columns] = scaler.fit_transform(df[scale_columns])
                st.success(f"Sayƒ±sal s√ºtunlar √∂l√ßeklendi: {', '.join(scale_columns)}")
            except Exception as e:
                st.error(f"Sayƒ±sal s√ºtunlar √∂l√ßeklenirken hata: {e}")
        else:
            st.info("√ñl√ßeklenecek sayƒ±sal s√ºtun se√ßilmedi.")

        # 3. Yeni √ñzellikler
        if new_features_input.strip():
            try:
                # Kullanƒ±cƒ±ya a√ßƒ±k√ßa df/np/pd objelerini sunuyoruz
                exec(new_features_input, {"df": df, "np": np, "pd": pd})
                st.success("Yeni feature ifadeleri ba≈üarƒ±yla uygulandƒ±.")
            except Exception as e:
                st.error(f"Yeni feature uygulanƒ±rken hata: {e}")

        # Sonu√ßlarƒ± g√∂ster
        st.write("### üìä √ñzellik M√ºhendisliƒüi Sonu√ß Verisi")
        st.dataframe(df)

        # ƒ∞steƒüe baƒülƒ± kaydet
        if st.button("Session State'e Kaydet"):
            st.session_state["data"] = df
            st.success("G√ºncellenmi≈ü veri session_state'e kaydedildi.")
